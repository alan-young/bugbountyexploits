package com.example.demo;

import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.xml.sax.InputSource;

@RestController
@RequestMapping(value="/consumexml")
public class XMLController {
 
    @RequestMapping(value="/vulnerable", method = RequestMethod.POST)
    public ResponseEntity<String> process(@RequestBody String request) throws ParserConfigurationException {
        
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();

        return parseDocument(builder, request);
    }

    @RequestMapping(value="/protected", method = RequestMethod.POST)
    public ResponseEntity<String> processWithXXEProtection(@RequestBody String request) throws ParserConfigurationException {
        
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);   
        factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
        factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
        factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false); 
        factory.setXIncludeAware(false);
        factory.setExpandEntityReferences(false);

        DocumentBuilder builder = factory.newDocumentBuilder();

        return parseDocument(builder, request);
    }

    private ResponseEntity<String> parseDocument(DocumentBuilder builder, String request) {
        try {
            builder.parse(new InputSource(new StringReader(request)));
        }
        catch (Exception exception) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }
}