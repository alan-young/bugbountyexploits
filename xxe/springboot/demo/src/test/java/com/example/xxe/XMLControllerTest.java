package com.example.xxe;

import java.net.URI;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
class XMLControllerTest {

	@Autowired
    private TestRestTemplate restTemplate;
     
    @LocalServerPort
	private int randomServerPort;

	@Test
	void whenNoXXEProtection_thenCallsOut() throws Exception {

		String vulnerableUrl = "http://localhost:"+randomServerPort+"/consumexml/vulnerable";

		// post XXE
        ResponseEntity<String> result = sendXXEPayload(vulnerableUrl);
		
		// no issues with the XML document, processed ok
        Assertions.assertEquals(HttpStatus.OK.value(), result.getStatusCodeValue());

		// check that XXE made outbound connection
		checkPhoneHomeStatus(true);
	}

	@Test
	void whenXXEProtection_thenBlocksCallout() throws Exception {

		String protectedUrl = "http://localhost:"+randomServerPort+"/consumexml/protected";
		
		ResponseEntity<String> result = sendXXEPayload(protectedUrl);
		
		// issues with XML document, XXE not allowed
        Assertions.assertEquals(HttpStatus.BAD_REQUEST.value(), result.getStatusCodeValue());

		// double check that didn't make an outgoing call 
		checkPhoneHomeStatus(false);
	}

	private ResponseEntity<String> sendXXEPayload(String url) throws Exception {
		
		String phoneHomeUrl = "http://localhost:"+randomServerPort+"/phonehome/set";
		String xxe =  
			"<?xml version=\"1.0\" ?>" +
			"<!DOCTYPE root [" +
			"<!ENTITY % ext SYSTEM \""+phoneHomeUrl+"\"> %ext;" +
			"]>" +
			"<r></r>";

		URI uri = new URI(url);
        HttpHeaders headers = new HttpHeaders();
		headers.set("Content-Type", "application/xml");  
		    
        return this.restTemplate.postForEntity(uri, xxe, String.class);
	}

	private void checkPhoneHomeStatus(boolean didPhoneHome) {

		String phonedHomeCheckUrl = "http://localhost:"+randomServerPort+"/phonehome/get";
		ResponseEntity<Boolean> phoneHome = this.restTemplate.getForEntity(phonedHomeCheckUrl, Boolean.class);
		
		Assertions.assertEquals(HttpStatus.OK.value(), phoneHome.getStatusCodeValue());
		Assertions.assertEquals(didPhoneHome, phoneHome.getBody());
	}
}